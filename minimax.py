# -*- coding: utf-8 -*-
"""Minimax.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vfbk7PDFXZ9ZJsvTGZudyXcFTlm9O6Ak
"""

import random

jogar = True
vez = ''
while jogar:
  print("Escolha com qual letra você quer jogar: O ou X")
  objeto = input().upper()
#O primeiro elemento na lista eh o do jogador e o segundo do computador
  print("Voce escolheu " + objeto)

  print("Começar o jogo!")
  tabuleiro = ['','','','','','','','','']
  imprimiTabuleiro(tabuleiro) 
  pecaJogador = objeto
  if(pecaJogador == 'X'):
    pecaComputador = 'O'
  else:
    pecaComputador = 'X'  

#Definir o primeiro a jogar
  if random.randint(0, 1) == 0:
	  vez = 'computador'
  else:
    vez = 'jogador'
	
  print('O jogo será iniciado pelo jogador ' + vez + '.')
  statusJogo = True

  while statusJogo:
    if vez == 'jogador':
      #Vez do Jogador
      imprimiTabuleiro(tabuleiro)
      movimento = movimentar(tabuleiro)
      jogar(tabuleiro, pecaJogador, movimento)

    else:
			#Vez do computador
      imprimiTabuleiro(tabuleiro)
      movimento = jogadaComputador(tabuleiro, pecaJogador, pecaComputador)
      jogar(tabuleiro, pecaComputador, movimento)

print("Escolha com qual letra você quer jogar: O ou X")
objeto = input().upper()
#O primeiro elemento na lista eh o do jogador e o segundo do computador
print("Voce escolheu " + objeto)

print("Começar o jogo!")
tabuleiro = ['','','','','','','','','']
imprimiTabuleiro(tabuleiro)

def imprimiTabuleiro(tabuleiro):

	#Esta funcao imprime o quadro do jogo
	copiaTab = copiarTabuleiro(tabuleiro)

	for i in range(0,9):
		if(tabuleiro[i] == ''):
			copiaTab[i] = str(i)
		else:
			copiaTab[i] = tabuleiro[i]
	
	print(' ' + copiaTab[6] + '|' + copiaTab[7] + '|' + copiaTab[8])
	print('-------')
	print(' '+ copiaTab[3] + '|' + copiaTab[4] + '|' + copiaTab[5])
	print('-------')
	print(' '+ copiaTab[0] + '|' + copiaTab[1] + '|' + copiaTab[2])
	print('-------')

def copiarTabuleiro(tabuleiro):
	#Copia tabuleiro atual

	tabuleiroCopy = []

	for i in tabuleiro:
		tabuleiroCopy.append(i)

	return tabuleiroCopy

def jogar(tabuleiro, objeto, movimento):
	tabuleiro[movimento] = objeto

def movimentar(tabuleiro):
  #Recebe o movimento do jogador
  movimento = ''
  print('Escolha uma das posições livre para se movimentar:')
  movimento = input()
  if(movimento not in '0 1 2 3 4 5 6 7 8'):
    print("MOVIMENTO INVALIDO!")
		
    if(movimento in '0 1 2 3 4 5 6 7 8'):
      if(not statusSpace(tabuleiro, int(movimento))):
        print ("Escolha outro espaço!")

  return int(movimento)

def statusSpace(tabuleiro, movimento):
	if(tabuleiro[movimento] == ''):
		return True
	else:
		return False

def jogadaComputador(tabuleiro, pecaJogador, pecaComputador):
  a = -2
  opcoes = []

  if pecaComputador == 'X':
    pecaJogador = 'O'
  else:
    pecaJogador = 'X'


  for i in range(0, 9):
    copia = copiarTabuleiro(tabuleiro)
    if statusSpace(copia, movimento):
      jogar(tabuleiro, pecaJogador, movimento)
    if isWinner(copia, pecaComputador):
      return i

	#Checa se o jogador pode vencer no proximo movimento e bloqueia
  for i in range(0, 9):
    copia = copiarTabuleiro(tabuleiro)
    if statusSpace(copia, i):
      jogar(tabuleiro, pecaJogador, movimento)
    if isWinner(copia, pecaJogador):
      return i

  possiveisOpcoesOn = opcoesDisponiveis(tabuleiro)

  jogar(tabuleiro, pecaComputador, movimento[i])

def opcoesDisponiveis(tabuleiro):

	opcoes = []

	for i in range(1, 10):
		if statusSpace(tabuleiro, i):
			opcoes.append(i)

	return opcoes

def isWinner(brd, let):
    return((brd[7] == let and brd[8] == let and brd[9] == let) or #linha de cima
		(brd[4] == let and brd[5] == let and brd[6] == let) or #linha do meio
		(brd[1] == let and brd[2] == let and brd[3] == let) or #linha de baixo
		(brd[7] == let and brd[4] == let and brd[1] == let) or #coluna da esquerda
		(brd[8] == let and brd[5] == let and brd[2] == let) or #coluna do meio
		(brd[9] == let and brd[6] == let and brd[3] == let) or #coluna da direito
		(brd[7] == let and brd[5] == let and brd[3] == let) or #diagonal principal
		(brd[9] == let and brd[5] == let and brd[1] == let)) #diagonal secundaria